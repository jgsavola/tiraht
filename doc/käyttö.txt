LZ78-(de)kompressorin käyttöohje
================================

Käyttö:

  java -jar dist/tiraht.jar [-d] [muut optiot] tiedosto1 [tiedosto2 ...]

Optiot:

  -d
        Purkumoodi (oletus: pakkaus).

  -f
        Tulosdata kirjoitetaan stdout:iin, ei tiedostoon.

  -v
        Tulosta tietoja ohjelman etenemisestä.

  --no-delete
        Lähtötiedostoa ei poisteta.

  --dict-size DICTSIZE
        Sanakirjan maksimikoko tavuissa. Oletus: -1 (ääretön).

  --dict-fill-up-strategy STRATEGY
        Strategia sanakirjan koon hallitsemiseksi:
            DoNothing (oletus) -- Älä tee mitään.
            Freeze             -- "Jäädytä" sanakirja. Uusi sanoja ei lisätä.
            Reset              -- Alusta uusi tyhjä sanakirja.

        Huom! Strategioiden toteutus on kesken, mahdollisesti rikki.

  --general-unary-params START STEP STOP
        Ohjelman käyttävän bittikoodauksen ("General Unary") parametrit:
            START              -- Koodit vähintään START bittiä.
            STEP               -- Kasvata koodin kokoa aina
                                  STEP bittiä kerrallaan.
            STOP               -- Koodin maksimikoko STOP bittiä.

        Oletus: 12 1 30. Nämä parametrit toimivat hyvin ainakin
        tiedostoille, joiden koko on kymmenistä kiloista megatavuihin.

  --test-compress
        Testataan vain LZ78-algoritmia ja jätetään bittikoodaus tekemättä.

  --test-bytetrie-num-children
        Testataan ByteTrie-rakenteen suorityskykyä. Tulosteena on
        taulukko, jossa on suoritusaikoja trie-rakenteen eri haarautumisasteilla.

  --test-bytetrie-phrase-length
        Testataan ByteTrie-rakenteen suorityskykyä. Tulosteena on
        taulukko, jossa on suoritusaikoja eripituisilla hakufraaseilla.


Esimerkkejä:

Pakkaa tiedostoon, pura ja vertaa:
  $ java -jar dist/tiraht.jar testdata/alice29.txt >alice29.txt.lz78
  $ java -jar dist/tiraht.jar -d alice29.txt.lz78 | diff testdata/alice29.txt -

Pakkaus, purku ja vertailu putkessa:
  $ java -jar dist/tiraht.jar testdata/alice29.txt | java -jar dist/tiraht.jar -d - | diff testdata/alice29.txt -

Vertaile pakkaustehoa vaihtelemalla sanakirjan kokoa:
  $ wc -c testdata/alice29.txt; for dictsize in 1000 2000 4000 8000 16000 32000 64000; do java -jar dist/tiraht.jar --dict-size $dictsize testdata/alice29.txt >alice29.dictsize$dictsize.lz78; wc -c alice29.dictsize$dictsize.lz78; done
  152089 testdata/alice29.txt
  130852 alice29.dictsize1000.lz78
  115944 alice29.dictsize2000.lz78
  103581 alice29.dictsize4000.lz78
  94797 alice29.dictsize8000.lz78
  86225 alice29.dictsize16000.lz78
  81595 alice29.dictsize32000.lz78
  81595 alice29.dictsize64000.lz78

Vertaile pakkaustehoa vaihtelemalla koodauksen parametreja:
  $ wc -c testdata/alice29.txt; for start in 6 8 10 12 14 16; do java -jar dist/tiraht.jar --general-unary-params $start 1 30 testdata/alice29.txt >alice29.start$start.lz78; wc -c alice29.start$start.lz78; done
  152089 testdata/alice29.txt
  92057 alice29.start6.lz78
  86360 alice29.start8.lz78
  82481 alice29.start10.lz78
  81595 alice29.start12.lz78
  84496 alice29.start14.lz78
  90913 alice29.start16.lz78

Testataan kompressiota erilaisilla dokumenteilla:

  

Testataan ainoastaan lz78-algoritmia (ei tehdä bittipakkausta eikä
kirjoitusta):

  $ /usr/bin/time java -jar dist/tiraht.jar --no-delete --test-compress -v testdata/*
  testdata/alice29.txt:          (sisään 152089 tavua; ulos 29091 koodia).
  testdata/canterbury on hakemisto. Ohitetaan.
  testdata/cantrbry.tar.gz:      (sisään 739071 tavua; ulos 255194 koodia).
  testdata/changelog:            (sisään 8035435 tavua; ulos 633062 koodia).
  testdata/emacs:                (sisään 10819480 tavua; ulos 1127696 koodia).
  testdata/openstreetmap_helsinki.ppm: (sisään 1386891 tavua; ulos 204059 koodia).
  testdata/openstreetmap_suomi.ppm: (sisään 1376676 tavua; ulos 58861 koodia).
  testdata/urandom:              (sisään 1000000 tavua; ulos 354383 koodia).
  testdata/zero:                 (sisään 1000000 tavua; ulos 1414 koodia).
  2.06user 0.05system 0:02.01elapsed 105%CPU (0avgtext+0avgdata 487552maxresident)k
  0inputs+0outputs (0major+31140minor)pagefaults 0swaps


Testataan ByteTrie-rakenteen suorituskykyä (fraasin pituus):

  $ /usr/bin/time java -jar dist/tiraht.jar --test-bytetrie-phrase-length >doc/trie_suorituskyky_fraasin_pituus.csv
  305.79user 0.90system 3:59.63elapsed 127%CPU (0avgtext+0avgdata 11373712maxresident)k
  0inputs+160outputs (0major+730563minor)pagefaults 0swaps

  $ sh doc/trie_suorituskyky_fraasin_pituus.sh
  $ display doc/trie_suorituskyky_fraasin_pituus.png

Testataan ByteTrie-rakenteen suorituskykyä (trien haarautumisaste):

  $ /usr/bin/time java -jar dist/tiraht.jar --test-bytetrie-num-children >doc/trie_suorituskyky_lapsisolmut.csv
  297.79user 1.23system 3:53.44elapsed 128%CPU (0avgtext+0avgdata 9778464maxresident)k
  0inputs+64outputs (0major+888318minor)pagefaults 0swaps

  $ sh doc/trie_suorituskyky_lapsisolmut.sh
  $ display doc/trie_suorituskyky_lapsisolmut.png

